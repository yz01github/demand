适配器模式:{
    基础:{
        定义：适配器模式将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)。

        隶属三大涉及结构: 结构型模式

        使用场景：
        1 系统需要使用现有的类，而这些类的接口不符合系统的需要。
        2 想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。
        3 需要一个统一的输出接口，而输入端的类型不可预知。
    }
    1. 类适配器：{
        通过继承和实现接口;
        适配器与适配者之间是继承（或实现）关系;
        格式:
        Adapter extends Adaptee implments Target{
            @Override  // Target的方法
            method(){
                Adaptee.xxx();//Adaptee的方法,这里也可以不继承,通过对象关联,见"对象适配器"
            }
        }

        实际案例: com.west.business.youngzeu.design.design1.HttpClassAdapter
    }

    2. 对象适配器
    通过关联对象

    实例参考: com.google.gson.TypeAdapter, 来自于jar:D:/mvn_repository/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar
    个人理解: 输入端类型有多种,且分别对应不同逻辑,输出端一致,此时
}